I would expect fib2 to perform better, since it uses a direct callback to check-if-done, which is only executed twice per call to fib2. fib1, on the other hand, continuously calls wait-for-xy, polling constantly to check if it can return, resulting in the waste of many CPU cycles.



The instrumentation added to the run procedure prints the list of tasks and the sizes of each task queue (output below). fib1 creates many more tasks because each time it is called, it redefines wait-for-xy. Thus each "1" in the output list represents a defined wait-for-xy, and the numbers of tasks with queue size 1 corresponds to the number of uncompleted fib1 calls. The larger number (after cont) corresponds to the fib1 task itself, which is called recursively, causing its queue size to grow.

On the other hand, fib2 is pretty straight forward, in that it doesn't create a bunch of unnecessary tasks to monitor whether the recursive calls have finished. This is why fib2 is so much more efficient - it doesn't keep adding to its task list, so it requires a smaller number of run calls.


(fib1 5 pp)
(run (cont))
(run (2 1))
(run (1 cont 1))
(run (cont 3 1))
(run (3 1 1))
(run (1 1 cont 2))
(run (1 cont 4 1))
(run (cont 4 1 1))
(run (4 1 1 1))
(run (1 1 1 cont 3))
(run (1 1 cont 5 1))
(run (1 cont 5 1 1))
(run (cont 5 1 1 1))
(run (5 1 1 1 1))
(run (1 1 1 1 cont 4))
(run (1 1 1 cont 6 1))
(run (1 1 cont 6 1 1))
(run (1 cont 6 1 1 1))
(run (cont 6 1 1 1 1))
(run (6 1 1 1 1 1))
(run (1 1 1 1 1 cont 5))
(run (1 1 1 1 cont 7 1))
(run (1 1 1 cont 7 1 1))
(run (1 1 cont 7 1 1 1))
(run (1 cont 7 1 1 1 1))
(run (cont 7 1 1 1 1 1))
(run (7 1 1 1 1 1 1))
(run (1 1 1 1 1 1 cont 6))
(run (1 1 1 1 1 cont 6))
(run (1 1 1 1 cont 6 1))
(run (1 1 1 cont 6 1 1))
(run (1 1 cont 6 1 1 1))
(run (1 cont 6 1 1 1 1))
(run (cont 6 1 1 1 1 1))
(run (6 1 1 1 1 1 1))
(run (1 1 1 1 1 1 cont 5))
(run (1 1 1 1 1 cont 7 1))
(run (1 1 1 1 cont 7 1 1))
(run (1 1 1 cont 7 1 1 1))
(run (1 1 cont 7 1 1 1 1))
(run (1 cont 7 1 1 1 1 1))
(run (cont 7 1 1 1 1 1 1))
(run (7 1 1 1 1 1 1 1))
(run (1 1 1 1 1 1 1 cont 6))
(run (1 1 1 1 1 1 cont 6))
(run (1 1 1 1 1 cont 6 1))
(run (1 1 1 1 cont 6 1 1))
(run (1 1 1 cont 6 1 1 1))
(run (1 1 cont 6 1 1 1 1))
(run (1 cont 6 1 1 1 1 1))
(run (cont 6 1 1 1 1 1 1))
(run (6 1 1 1 1 1 1 1))
(run (1 1 1 1 1 1 1 cont 5))
(run (1 1 1 1 1 1 cont 5))
(run (1 1 1 1 1 cont 5 1))
(run (1 1 1 1 cont 5 1 1))
(run (1 1 1 cont 5 1 1 1))
(run (1 1 cont 5 1 1 1 1))
(run (1 cont 5 1 1 1 1 1))
(run (cont 5 1 1 1 1 1 1))
(run (5 1 1 1 1 1 1 1))
(run (1 1 1 1 1 1 1 cont 4))
(run (1 1 1 1 1 1 cont 4))
(run (1 1 1 1 1 cont 4 1))
(run (1 1 1 1 cont 4 1 1))
(run (1 1 1 cont 4 1 1))
(run (1 1 cont 4 1 1 1))
(run (1 cont 4 1 1 1 1))
(run (cont 4 1 1 1 1 1))
(run (4 1 1 1 1 1 1))
(run (1 1 1 1 1 1 cont 3))
(run (1 1 1 1 1 cont 3))
(run (1 1 1 1 cont 3 1))
(run (1 1 1 cont 3 1 1))
(run (1 1 cont 3 1 1 1))
(run (1 cont 3 1 1 1 1))
(run (cont 3 1 1 1 1 1))
(run (3 1 1 1 1 1 1))
(run (1 1 1 1 1 1 cont 2))
(run (1 1 1 1 1 cont 2))
(run (1 1 1 1 cont 2 1))
(run (1 1 1 cont 2 1))
(run (1 1 cont 2 1 1))
(run (1 cont 2 1 1))
(run (cont 2 1 1 1))
(run (2 1 1 1 1))
(run (1 1 1 1 cont 1))
(run (1 1 1 cont 1))
(run (1 1 cont 1 1))
(run (1 cont 1 1 1))
(run (cont 1 1 1 1))
(run (1 1 1 1 1))
(run (1 1 1 1 cont))
(run (1 1 1 cont))
(run (1 1 cont))
(run (1 cont))
(run (cont))
5


(fib2 5 pp)
(run (cont))
(run (2))
(run (cont 1))
(run (3))
(run (cont 2))
(run (4))
(run (cont 3))
(run (5))
(run (cont 4))
(run (6))
(run (cont 5))
(run (7))
(run (cont 6))
(run (6))
(run (cont 5))
(run (7))
(run (cont 6))
(run (6))
(run (cont 5))
(run (5))
(run (cont 4))
(run (4))
(run (cont 3))
(run (3))
(run (cont 2))
(run (2))
(run (cont 1))
(run (1))
(run (cont))
5
diff --git a/pset4/analyze-amb.scm b/pset4/analyze-amb.scm





index ef13ef5..e2544b8 100644
--- a/pset4/analyze-amb.scm
+++ b/pset4/analyze-amb.scm
@@ -48,11 +48,11 @@
         (aproc (analyze (if-alternative exp))))
     (lambda (env succeed fail)
       (pproc env
-	     (lambda (pred-value pred-fail)
-	       (if (true? pred-value)
-		   (cproc env succeed pred-fail)
-		   (aproc env succeed pred-fail)))
-	     fail))))
+       (lambda (pred-value pred-fail)
+         (if (true? pred-value)
+       (cproc env succeed pred-fail)
+       (aproc env succeed pred-fail)))
+       fail))))
 
 (defhandler analyze analyze-if if?)
 
@@ -138,18 +138,32 @@
         (vproc (analyze (assignment-value exp))))
     (lambda (env succeed fail)
       (vproc env
-	     (lambda (new-val val-fail)
-	       (let ((old-val (lookup-variable-value var env)))
-		 (set-variable-value! var new-val env)
-		 (succeed 'OK
-		   (lambda ()
-		     (set-variable-value! var old-val env)
-		     (val-fail)))))
-	     fail))))
+       (lambda (new-val val-fail)
+         (let ((old-val (lookup-variable-value var env)))
+     (set-variable-value! var new-val env)
+     (succeed 'OK
+       (lambda ()
+         (set-variable-value! var old-val env)
+         (val-fail)))))
+       fail))))
 
 (defhandler analyze
   analyze-undoable-assignment
   assignment?)
+
+(define (analyze-permanent-assignment exp)
+  (let ((var (assignment-variable exp))
+        (vproc (analyze (assignment-value exp))))
+    (lambda (env succeed fail)
+      (vproc env
+        (lambda (new-val val-fail)
+          (set-variable-value! var new-val env)
+          (succeed 'OK val-fail))
+        fail))))
+
+(defhandler analyze
+  analyze-permanent-assignment
+  permanent-assignment?)
 
 (define (analyze-definition exp)
   (let ((var (definition-variable exp))
@@ -191,3 +205,16 @@
   (lambda (exp)
     (analyze (let->combination exp)))
   let?)
+
+
+
+(define (analyze-if-fail exp)
+  (let ((proc    (analyze (if-fail-proc exp)))
+        (failure (analyze (if-fail-failure exp))))
+    (lambda (env succeed fail)
+      (proc env
+        succeed
+        (lambda ()
+          (failure env succeed fail))))))
+
+(defhandler analyze analyze-if-fail if-fail?)





diff --git a/pset4/analyze.scm b/pset4/analyze.scm
index 14a93ea..670b749 100644
--- a/pset4/analyze.scm
+++ b/pset4/analyze.scm
@@ -69,11 +69,20 @@
 
 (defhandler execute-application
   (lambda (proc args)
+    (let
+      ((modded-args
+        (if (list? (procedure-parameters proc))
+          args
+          (list args)))
+      (modded-params
+        (if (list? (procedure-parameters proc))
+          (procedure-parameters proc)
+          (list (procedure-parameters proc)))))
     ((procedure-body proc)
      (extend-environment 
-      (procedure-parameters proc)
-      args
-      (procedure-environment proc))))
+      modded-params
+      modded-args
+      (procedure-environment proc)))))
   compound-procedure?)
 
 (define (analyze-sequence exps)
@@ -118,3 +127,5 @@
 (defhandler analyze (compose analyze cond->if) cond?)
 
 (defhandler analyze (compose analyze let->combination) let?)
+
+(defhandler analyze (compose analyze infix->scheme) infix?)





diff --git a/pset4/answers.txt b/pset4/answers.txt
new file mode 100644
index 0000000..b2ba2bd
--- /dev/null
+++ b/pset4/answers.txt
@@ -0,0 +1,125 @@
+============ 4.1 ============
+Code in analyze.scm
+
+Test output:
+eval> ((lambda x (map square x)) 1 2 3 4)
+(1 4 9 16)
+
+eval> ((lambda (x y) (square (+ x y))) 3 1)
+16
+
+eval> (define (ss . x) (map square x))
+ok
+
+eval> (ss 1 2 3 4)
+(1 4 9 16)
+
+
+
+============ 4.2 ============
+Code in analyze.scm
+
+Test output:
+eval> (infix "4+2")
+6
+
+eval> (infix "4*5+3*2")
+26
+
+eval> (infix "4*(5+3)*2")
+64
+
+eval> (infix "((3+4))")
+7
+
+eval> (define (quadratic a b c)
+  (let ((discriminant (infix "b^2-4*a*c")))
+    (infix "(-b+sqrt(discriminant))/(2*a)")))
+ok
+
+eval> (quadratic 1 3 -4)
+1
+
+
+
+============ 4.3 ============
+4.38
+Modified procedure:
+(define (multiple-dwelling)
+  (let ((baker    (amb 1 2 3 4 5))
+        (cooper   (amb 1 2 3 4 5))
+        (fletcher (amb 1 2 3 4 5))
+        (miller   (amb 1 2 3 4 5))
+        (smith    (amb 1 2 3 4 5)))
+    (require
+     (distinct (list baker cooper fletcher miller smith)))
+    (require (not (= baker 5)))
+    (require (not (= cooper 1)))
+    (require (not (= fletcher 5)))
+    (require (not (= fletcher 1)))
+    (require (> miller cooper))
+    (require (not (= (abs (- fletcher cooper)) 1)))
+    (list (list 'baker baker)
+          (list 'cooper cooper)
+          (list 'fletcher fletcher)
+          (list 'miller miller)
+          (list 'smith smith))))
+Number of solutions: 5
+
+4.39
+The order does not effect the answer, since the same constraints are being used. The same nodes in the search tree are explored, since at each step, the same rules are being checked and the nodes are walked in the same order.
+However, there is a possibility for a constant time speedup. This is because each rule must be evaluated until one fails (or they all succeed) at each step. Thus it would be beneficial to put inexpensive rules that fail often near the beginning, to avoid evaluating the more expensive or more successful rules.
+
+4.40
+Number of assignments before distinct requirement: 5^5 = 3125
+Number of assignments after distinct requirement:  5!  = 120
+
+Code to the improved multiple dwelling solver in multiple-dwelling.scm - see multiple-dwelling-better
+
+
+
+============ 4.4 ============
+4.51
+Code in analyze-amb.scm - see analyze-permanent-assignment
+Using permanent-set!
+;;; Starting a new problem 
+;;; Amb-Eval value:
+(a b 2)
+
+;;; Amb-Eval input:
+try-again
+
+;;; Amb-Eval value:
+(a c 3)
+
+;;; Amb-Eval input:
+try-again
+
+;;; Amb-Eval value:
+(b a 4)
+
+Using set!
+;;; Starting a new problem 
+;;; Amb-Eval value:
+(a b 1)
+
+;;; Amb-Eval input:
+try-again
+
+;;; Amb-Eval value:
+(a c 1)
+
+;;; Amb-Eval input:
+try-again
+
+;;; Amb-Eval value:
+(b a 1)
+
+
+4.52
+Code in analyze-amb.scm - see analyze-if-fail
+
+
+4.53
+This code will return all pairs that satisfy prime-sum-pair given the two specified lists -
+((8 35) (3 110) (3 20))
\ No newline at end of file





diff --git a/pset4/if-fail.scm b/pset4/if-fail.scm
new file mode 100644
index 0000000..8d5f798
--- /dev/null
+++ b/pset4/if-fail.scm
@@ -0,0 +1,25 @@
+
+(define (require p)
+  (if (not p) (amb)))
+
+(define (distinct l)
+  (cond ((null? l) true)
+  ((null? (cdr l)) true)
+  ((member (car l) (cdr l)) false)
+  (else (distinct (cdr l)))))
+
+(define (an-element-of items)
+  (require (not (null? items)))
+  (amb (car items) (an-element-of (cdr items))))
+
+(if-fail
+  (let ((x (an-element-of '(1 3 5))))
+    (require (even? x))
+    x)
+  'all-odd)
+
+(if-fail
+  (let ((x (an-element-of '(1 3 5 8))))
+    (require (even? x))
+    x)
+  'all-odd)
\ No newline at end of file





diff --git a/pset4/multiple-dwelling.scm b/pset4/multiple-dwelling.scm
index 4ab0311..13a2133 100644
--- a/pset4/multiple-dwelling.scm
+++ b/pset4/multiple-dwelling.scm
@@ -28,3 +28,27 @@
           (list 'fletcher fletcher)
           (list 'miller miller)
           (list 'smith smith))))
+
+(define (multiple-dwelling-better)
+  (let ((baker (amb 1 2 3 4 5)))
+    (require (not (= baker 5)))
+    (let ((cooper (amb 1 2 3 4 5)))
+      (require (distinct (list baker cooper)))
+      (require (not (= cooper 1)))
+      (let ((fletcher (amb 1 2 3 4 5)))
+        (require (distinct (list baker cooper fletcher)))
+        (require (not (= fletcher 1)))
+        (require (not (= fletcher 5)))
+        (require (not (= (abs (- fletcher cooper)) 1)))
+        (let ((miller (amb 1 2 3 4 5)))
+          (require (distinct (list baker cooper fletcher miller)))
+          (require (> miller cooper))
+          (let ((smith (amb 1 2 3 4 5)))
+            (require (distinct (list baker cooper fletcher miller smith)))
+            (require (not (= (abs (- smith fletcher)) 1)))
+            (list (list 'baker baker)
+                  (list 'cooper cooper)
+                  (list 'fletcher fletcher)
+                  (list 'miller miller)
+                  (list 'smith smith))))))))
+            





diff --git a/pset4/permanent-set.scm b/pset4/permanent-set.scm
new file mode 100644
index 0000000..c44c1b5
--- /dev/null
+++ b/pset4/permanent-set.scm
@@ -0,0 +1,20 @@
+
+(define (require p)
+  (if (not p) (amb)))
+
+(define (distinct l)
+  (cond ((null? l) true)
+  ((null? (cdr l)) true)
+  ((member (car l) (cdr l)) false)
+  (else (distinct (cdr l)))))
+
+(define (an-element-of items)
+  (require (not (null? items)))
+  (amb (car items) (an-element-of (cdr items))))
+
+(define count 0)
+(let ((x (an-element-of '(a b c)))
+      (y (an-element-of '(a b c))))
+  (permanent-set! count (+ count 1))
+  (require (not (eq? x y)))
+  (list x y count))





diff --git a/pset4/syntax.scm b/pset4/syntax.scm
index 40ba784..5053727 100644
--- a/pset4/syntax.scm
+++ b/pset4/syntax.scm
@@ -31,7 +31,7 @@
 ;;; Assignment--- SET!
 
 (define (assignment? exp) (tagged-list? exp 'set!))
-(define (permanent-assignment? exp) (tagged-list? exp 'set!!))
+(define (permanent-assignment? exp) (tagged-list? exp 'permanent-set!))
 
 (define (assignment-variable assn) (cadr  assn))
 (define (assignment-value    assn) (caddr assn))
@@ -152,10 +152,123 @@
 (define (let-body let-exp) (sequence->begin (cddr let-exp)))
 (define (let->combination let-exp)
   (let ((names (let-bound-variables let-exp))
-	(values (let-values let-exp))
-	(body (let-body let-exp)))
+  (values (let-values let-exp))
+  (body (let-body let-exp)))
     (cons (list 'LAMBDA names body)
-	  values)))
+    values)))
+
+;;; INFIX expressions
+
+(define (infix? exp) (tagged-list? exp 'infix))
+
+(define (get-parens lst i first-paren open-parens)
+  (cond
+    ((>= i (length lst))
+      -1)
+    ((not (string? (list-ref lst i)))
+      (get-parens lst (+ i 1) first-paren open-parens))
+    ((string=? (list-ref lst i) "(")
+      (get-parens lst (+ i 1) (if (eq? first-paren -1) i first-paren) (+ open-parens 1)))
+    ((string=? (list-ref lst i) ")")
+      (if (eq? open-parens 1)
+        (list first-paren i)
+        (get-parens lst (+ i 1) first-paren (- open-parens 1))))
+    (else
+      (get-parens lst (+ i 1) first-paren open-parens))))
+
+(define (index-of lst i item)
+  (cond
+    ((eq? i (length lst))
+      -1)
+    ((not (string? (list-ref lst i)))
+      (index-of lst (+ i 1) item))
+    ((string=? item (list-ref lst i))
+      i)
+    (else
+      (index-of lst (+ i 1) item))))
+
+(define (split-list lst item)
+  (let ((i (index-of lst 0 item)))
+    (if (eq? i -1)
+      '()
+      (list (list-head lst i) (list-tail lst (+ i 1))))))
+
+(define (infix-tokens->scheme infix-symbols)
+  (let ((add (split-list infix-symbols "+"))
+        (sub (split-list infix-symbols "-"))
+        (mul (split-list infix-symbols "*"))
+        (div (split-list infix-symbols "/"))
+        (expo (split-list infix-symbols "^"))
+        (sqroot (split-list infix-symbols "sqrt"))
+        (parens (get-parens infix-symbols 0 -1 0)))
+    (cond
+      ((null? infix-symbols)
+        '())
+      ((eq? (length infix-symbols) 1)
+        (let ((symbol (first infix-symbols)))
+          (if (or (symbol? symbol) (list? symbol))
+            symbol
+            (let ((number (string->number symbol)))
+              (if (not (eq? number #f))
+                number
+                (string->symbol (first infix-symbols)))))))
+      ((list? parens)
+        (let ((i (first parens)) (j (second parens)))
+          (infix-tokens->scheme (append
+            (list-head infix-symbols i)
+            (list (infix-tokens->scheme (sublist infix-symbols (+ i 1) j)))
+            (list-tail infix-symbols (+ j 1))))))
+      ((not (null? add))
+        (list '+ (infix-tokens->scheme (first add))
+                 (infix-tokens->scheme (second add))))
+      ((not (null? sub))
+        (let ((first-arg (infix-tokens->scheme (first sub))))
+          (if (null? first-arg)
+            (list '- (infix-tokens->scheme (second sub)))
+            (list '- (infix-tokens->scheme (first sub))
+                     (infix-tokens->scheme (second sub))))))
+      ((not (null? mul))
+        (list '* (infix-tokens->scheme (first mul))
+                 (infix-tokens->scheme (second mul))))
+      ((not (null? div))
+        (list '/ (infix-tokens->scheme (first div))
+                 (infix-tokens->scheme (second div))))
+      ((not (null? expo))
+        (list 'expt (infix-tokens->scheme (first expo))
+                    (infix-tokens->scheme (second expo))))
+      ((not (null? sqroot))
+        (list 'sqrt (infix-tokens->scheme (second sqroot)))))))
+
+(define (infix-tokenizer infix-str)
+  (token-helper infix-str 0
+    (sort (append (map (lambda (i) (list i "+" 1)) (string-search-all "+" infix-str))
+                  (map (lambda (i) (list i "-" 1)) (string-search-all "-" infix-str))
+                  (map (lambda (i) (list i "*" 1)) (string-search-all "*" infix-str))
+                  (map (lambda (i) (list i "/" 1)) (string-search-all "/" infix-str))
+                  (map (lambda (i) (list i "(" 1)) (string-search-all "(" infix-str))
+                  (map (lambda (i) (list i ")" 1)) (string-search-all ")" infix-str))
+                  (map (lambda (i) (list i "^" 1)) (string-search-all "^" infix-str))
+                  (map (lambda (i) (list i "sqrt" 4)) (string-search-all "sqrt(" infix-str)))
+      (lambda (tuple1 tuple2) (< (first tuple1) (first tuple2))))))
+
+(define (token-helper str start operator-list)
+  (if (null? operator-list)
+    (if (eq? start (string-length str))
+      '()
+      (list (string-tail str start)))
+    (let ((operator-tuple (first operator-list)))
+      (let ((operator-start-index (first operator-tuple))
+            (operator-end-index (+ (first operator-tuple) (third operator-tuple)))
+            (symbol (second operator-tuple)))
+        (if (eq? start operator-start-index)
+          (cons symbol (token-helper str operator-end-index (cdr operator-list)))
+          (append
+            (list (substring str start operator-start-index)
+                  symbol)
+            (token-helper str operator-end-index (cdr operator-list))))))))
+
+(define (infix->scheme infix-exp)
+  (infix-tokens->scheme (infix-tokenizer (second infix-exp))))
 
 ;;; Procedure applications -- NO-ARGS? and LAST-OPERAND? added
 
@@ -188,3 +301,10 @@
 
 (define (amb-alternatives exp) (cdr exp))
 
+
+
+(define (if-fail? exp) (tagged-list? exp 'if-fail))
+
+(define (if-fail-proc exp) (cadr exp))
+
+(define (if-fail-failure exp) (caddr exp))

============ 4.1 ============
Code in analyze.scm

Test output:
eval> ((lambda x (map square x)) 1 2 3 4)
(1 4 9 16)

eval> ((lambda (x y) (square (+ x y))) 3 1)
16

eval> (define (ss . x) (map square x))
ok

eval> (ss 1 2 3 4)
(1 4 9 16)



============ 4.2 ============
Code in analyze.scm

Test output:
eval> (infix "4+2")
6

eval> (infix "4*5+3*2")
26

eval> (infix "4*(5+3)*2")
64

eval> (infix "((3+4))")
7

eval> (define (quadratic a b c)
  (let ((discriminant (infix "b^2-4*a*c")))
    (infix "(-b+sqrt(discriminant))/(2*a)")))
ok

eval> (quadratic 1 3 -4)
1



============ 4.3 ============
4.38
Modified procedure:
(define (multiple-dwelling)
  (let ((baker    (amb 1 2 3 4 5))
        (cooper   (amb 1 2 3 4 5))
        (fletcher (amb 1 2 3 4 5))
        (miller   (amb 1 2 3 4 5))
        (smith    (amb 1 2 3 4 5)))
    (require
     (distinct (list baker cooper fletcher miller smith)))
    (require (not (= baker 5)))
    (require (not (= cooper 1)))
    (require (not (= fletcher 5)))
    (require (not (= fletcher 1)))
    (require (> miller cooper))
    (require (not (= (abs (- fletcher cooper)) 1)))
    (list (list 'baker baker)
          (list 'cooper cooper)
          (list 'fletcher fletcher)
          (list 'miller miller)
          (list 'smith smith))))
Number of solutions: 5

4.39
The order does not effect the answer, since the same constraints are being used. The same nodes in the search tree are explored, since at each step, the same rules are being checked and the nodes are walked in the same order.
However, there is a possibility for a constant time speedup. This is because each rule must be evaluated until one fails (or they all succeed) at each step. Thus it would be beneficial to put inexpensive rules that fail often near the beginning, to avoid evaluating the more expensive or more successful rules.

4.40
Number of assignments before distinct requirement: 5^5 = 3125
Number of assignments after distinct requirement:  5!  = 120

Code to the improved multiple dwelling solver in multiple-dwelling.scm - see multiple-dwelling-better



============ 4.4 ============
4.51
Code in analyze-amb.scm - see analyze-permanent-assignment
Using permanent-set!
;;; Starting a new problem 
;;; Amb-Eval value:
(a b 2)

;;; Amb-Eval input:
try-again

;;; Amb-Eval value:
(a c 3)

;;; Amb-Eval input:
try-again

;;; Amb-Eval value:
(b a 4)

Using set!
;;; Starting a new problem 
;;; Amb-Eval value:
(a b 1)

;;; Amb-Eval input:
try-again

;;; Amb-Eval value:
(a c 1)

;;; Amb-Eval input:
try-again

;;; Amb-Eval value:
(b a 1)


4.52
Code in analyze-amb.scm - see analyze-if-fail


4.53
This code will return all pairs that satisfy prime-sum-pair given the two specified lists -
((8 35) (3 110) (3 20))
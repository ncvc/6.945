Nathan Villagaray-Carski (ncvc)
6.945 Pset 8

diff --git a/pset8/8-1.txt b/pset8/8-1.txt
new file mode 100644
index 0000000..7f209e3
--- /dev/null
+++ b/pset8/8-1.txt
@@ -0,0 +1,3 @@
+Time Complexity: O(M + N^2), where N is the length of the fringe, and M is the number of nodes. The algorithm has to iterate through all nodes in the tree, and must append the fringe list on each iteration. Since the append procedure is a O(N) algorithm, the total time spent on append is upper-bounded by the number of items in the fringe list.
+
+Space Complexity: If the procedure is tail-call optimized, then the algorithm needs O(N) space, where N is the length of the fringe, because it needs to store each fringe node. Otherwise, the space complexity is O(M), where M is the number of nodes, since it must save the stack for each recursive call. I believe that it cannot be TCO'd since append must be called after the recursive calls, but I am unsure.
diff --git a/pset8/8-2.scm b/pset8/8-2.scm
new file mode 100644
index 0000000..c07054f
--- /dev/null
+++ b/pset8/8-2.scm
@@ -0,0 +1,17 @@
+#|
+8.2.A
+The procedure would not use lazy evaluation at all - lazy-fringe would just traverse the entire tree on the first call and return a stream of these elements.
+|#
+
+;;; 8.2.B
+(define (lazy-fringe subtree)
+  (define (walk subtree ans)
+    (cond
+      ((pair? subtree)
+        (walk (car subtree)
+              (lambda () (walk (cdr subtree) ans))))
+      ((null? subtree)
+        (ans))
+      (else
+        (cons-stream subtree (ans)))))
+  (walk subtree (lambda () the-empty-stream)))
diff --git a/pset8/8-3.txt b/pset8/8-3.txt
new file mode 100644
index 0000000..b5479b0
--- /dev/null
+++ b/pset8/8-3.txt
@@ -0,0 +1 @@
+If the function returned resume-thunk, each time f1 or f2 is called, the code (walk tree (lambda () *done*)) would be run. However, since coroutine-fringe-generator set!s resume-thunk to continue in the wrapper, the next time f1 or f2 is called, the most recent continue will be called, instead of the original - (walk tree (lambda () *done*)) - resume-thunk.
diff --git a/pset8/8-4.txt b/pset8/8-4.txt
new file mode 100644
index 0000000..2ded766
--- /dev/null
+++ b/pset8/8-4.txt
@@ -0,0 +1 @@
+The *done* value must be returned in the same manner as all other nodes of the tree are returned. Otherwise, all calls to acs-coroutine-same-fringe? return false. This is because at the end of the tree traversal, the last call to f1 returns *done*, while the last call to f2 returns the first element of the second tree - the *done* value is not properly yielded back to the caller of f2.
diff --git a/pset8/8-5.scm b/pset8/8-5.scm
new file mode 100644
index 0000000..b61d46a
--- /dev/null
+++ b/pset8/8-5.scm
@@ -0,0 +1,24 @@
+(define (make-pipe)
+  (list (conspire:make-lock) (queue:make)))
+
+
+(define (pipe-reader pipe)
+  (let ((lock (first pipe)) (queue (second pipe)))
+    (lambda ()
+      (conspire:switch-threads
+        (lambda ()
+          (not (queue:empty? queue))))
+
+      (conspire:acquire-lock lock)
+      (let ((item (queue:get-first queue)))
+        (queue:delete-from-queue! queue item)
+        (conspire:unlock lock)
+        item))))
+
+
+(define (pipe-writer pipe)
+  (let ((lock (first pipe)) (queue (second pipe)))
+    (lambda (item)
+      (conspire:acquire-lock lock)
+      (queue:add-to-end! queue item)
+      (conspire:unlock lock))))
diff --git a/pset8/8-6.scm b/pset8/8-6.scm
new file mode 100644
index 0000000..085ba13
--- /dev/null
+++ b/pset8/8-6.scm
@@ -0,0 +1,39 @@
+(define (make-threaded-filter generator)
+  (let ((pipe (make-pipe)))
+    (conspire:make-thread
+      conspire:runnable
+      (lambda ()
+        (generator (pipe-writer pipe))))
+    (pipe-reader pipe)))
+
+
+#|
+;;; Sample output
+
+1 ]=> (with-time-sharing-conspiracy
+      (lambda ()
+        (tf-piped-same-fringe?
+         '((a b) c ((d)) e (f ((g h))))
+         '(a b c ((d) () e) (g (f ))))
+        ))
+
+;Value: #f
+
+1 ]=> (with-time-sharing-conspiracy
+      (lambda ()
+        (tf-piped-same-fringe?
+         '((a b) c ((d)) e (f ((g h))))
+         '(a b c ((d) () e) (g (f (h)))))
+        ))
+
+;Value: #f
+
+1 ]=> (with-time-sharing-conspiracy
+      (lambda ()
+        (tf-piped-same-fringe?
+         '((a b) c ((d)) e (f ((g h))))
+         '(a b c ((d) () e) (f (g (h)))))
+        ))
+
+;Value: #t
+|#

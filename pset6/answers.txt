6.3
DFS explores one branch at a time, traversing each entire subtree of a given node in order. BFS, on the other hand, explores many branches at once, and switches between each subtree, "pausing" to look at a different subtree each time a new node is expanded. DFS explores less total nodes because it only explores paths down the tree which it actually tests for success, whereas BFS may expand many partial paths down the tree that it never tests for success, effectively wasting any work done by expanding those paths.

The value of *number-of-calls-to-fail* corresponds to the number of times an amb-list runs out of possible elements during a search, i.e. when all of a node's children have been expanded. This value is smaller for DFS because of the reasons stated above - BFS may waste some of the work it did expanding nodes it never actually tests for success.

For the a-pythagorean-triple-from search, each node has an infinite number of children, at least until we hit an overflow, so DFS will traverse down with the initial i and j values, and then keep trying k values until an integer overflow occurs. Since i=j=1 initially, and no integer k satisfies the pythagorean triple requirement, DFS has no hope of succeeding.
On the other hand, because of the way an-integer-between is structured, this BFS explores the tree of possible values in a bottom-left to top-right order, instead of the typical level-by-level order. (an-integer-from x) is equivalent to (amb x (amb (+ x 1) (amb (+ x 2) ...))), which allows for this "diagonal" traversal. This way, BFS can gradually explore a wide area of the tree without getting stuck in a hopeless situation like DFS.



6.4
A
We could use a random AMB to return a random word of the day from a given list of words

B
See ambsch.scm

Test cases:
1 ]=> (with-random-order-alternation
  (lambda ()
    (amb 'Muddledness 'Myofibrilla 'Congelifract 'Noncontextually 'Overphilosophize 'Deratizing 'Unascribed 'Arboresque)))
;Value: deratizing


1 ]=> (with-random-order-alternation elementary-backtrack-test)
(2)
(2 b)
(2 b #f)
(2 b #t)
(2 a)
(2 a #t)
(2 a #f)
(3)
(3 a)
(3 a #f)
(3 a #t)
(3 b)
(3 b #f)
(3 b #t)
(1)
(1 a)
(1 a #t)
(1 a #f)
(1 b)
(1 b #f)
(1 b #t)
;Value: #f


1 ]=> (with-right-to-left-alternation elementary-backtrack-test)
(1)
(1 a)
(1 a #t)
(1 a #f)
(1 b)
(1 b #t)
(1 b #f)
(2)
(2 a)
(2 a #t)
(2 a #f)
(2 b)
(2 b #t)
(2 b #f)
(3)
(3 a)
(3 a #t)
(3 a #f)
(3 b)
(3 b #t)
(3 b #f)
;Value: #f


1 ]=> (with-right-to-left-alternation elementary-backtrack-test)
(3)
(3 b)
(3 b #f)
(3 b #t)
(3 a)
(3 a #f)
(3 a #t)
(2)
(2 b)
(2 b #f)
(2 b #t)
(2 a)
(2 a #f)
(2 a #t)
(1)
(1 b)
(1 b #f)
(1 b #t)
(1 a)
(1 a #f)
(1 a #t)
;Value: #f



6.5
set! updates the value of an existing binding. In this case, for each amb, all possible values are cycled through and the variable is assigned with respect to all continuations, instead of just the current continuation as we expect. This results in the variable keeping it's last value for all continuations once amb is done looping through the possible values.

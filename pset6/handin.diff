diff --git a/pset6/6.1.scm b/pset6/6.1.scm
new file mode 100644
index 0000000..da2bdce
--- /dev/null
+++ b/pset6/6.1.scm
@@ -0,0 +1,65 @@
+; Part 1
+(define yacht-puzzle
+  (lambda ()
+    (let ((Moore (list 'Mary-Ann 'Lorna))
+          (Downing (list (amb 'Mary-Ann 'Gabrielle 'Lorna 'Rosalind 'Melissa) 'Melissa))
+          (Hall (list (amb 'Mary-Ann 'Gabrielle 'Lorna 'Rosalind 'Melissa) 'Rosalind))
+          (Hood (list 'Melissa 'Gabrielle))
+          (Parker (list (amb 'Mary-Ann 'Gabrielle 'Lorna 'Rosalind 'Melissa) (amb 'Mary-Ann 'Gabrielle 'Lorna 'Rosalind 'Melissa))))
+      (let ((people (list Moore Downing Hall Hood Parker)))
+        (require (distinct? (map (lambda (person) (first person)) people)))
+        (require (distinct? (map (lambda (person) (second person)) people)))
+        (require (eq? (second (list-search-positive people (lambda (person) (eq? 'Gabrielle (first person))))) (first Parker)))
+        (list (list 'Moore Moore)
+              (list 'Downing Downing)
+              (list 'Hall Hall)
+              (list 'Hood Hood)
+              (list 'Parker Parker))))))
+
+;Solution:
+; 1 ]=> (with-depth-first-schedule yacht-puzzle)
+; ;Value 11: ((moore (mary-ann lorna)) (downing (lorna melissa)) (hall (gabrielle rosalind)) (hood (melissa gabrielle)) (parker (rosalind mary-ann)))
+
+; Lorna's father is Downing
+
+
+; Part 2
+(define yacht-puzzle-less-info
+  (lambda ()
+    (let ((Moore (list (amb 'Mary-Ann 'Gabrielle 'Lorna 'Rosalind 'Melissa) 'Lorna))
+          (Downing (list (amb 'Mary-Ann 'Gabrielle 'Lorna 'Rosalind 'Melissa) 'Melissa))
+          (Hall (list (amb 'Mary-Ann 'Gabrielle 'Lorna 'Rosalind 'Melissa) 'Rosalind))
+          (Hood (list 'Melissa 'Gabrielle))
+          (Parker (list (amb 'Mary-Ann 'Gabrielle 'Lorna 'Rosalind 'Melissa) (amb 'Mary-Ann 'Gabrielle 'Lorna 'Rosalind 'Melissa))))
+      (let ((people (list Moore Downing Hall Hood Parker)))
+        (require (distinct? (map (lambda (person) (first person)) people)))
+        (require (distinct? (map (lambda (person) (second person)) people)))
+        (require (eq? (second (list-search-positive people (lambda (person) (eq? 'Gabrielle (first person))))) (first Parker)))
+        (pp (list (list 'Moore Moore)
+                  (list 'Downing Downing)
+                  (list 'Hall Hall)
+                  (list 'Hood Hood)
+                  (list 'Parker Parker)))))
+  (amb)))
+
+;Solution:
+; 1 ]=> (with-depth-first-schedule yacht-puzzle-less-info)
+; ((moore (gabrielle lorna)) (downing (rosalind melissa))
+;                            (hall (mary-ann rosalind))
+;                            (hood (melissa gabrielle))
+;                            (parker (lorna mary-ann)))
+; ((moore (gabrielle lorna)) (downing (mary-ann melissa))
+;                            (hall (rosalind rosalind))
+;                            (hood (melissa gabrielle))
+;                            (parker (lorna mary-ann)))
+; ((moore (lorna lorna)) (downing (mary-ann melissa))
+;                        (hall (gabrielle rosalind))
+;                        (hood (melissa gabrielle))
+;                        (parker (rosalind mary-ann)))
+; ((moore (mary-ann lorna)) (downing (lorna melissa))
+;                           (hall (gabrielle rosalind))
+;                           (hood (melissa gabrielle))
+;                           (parker (rosalind mary-ann)))
+; ;Value: #f
+
+; There are 4 possible solutions if we don't know that Mary Ann's last name is Moore.
\ No newline at end of file
diff --git a/pset6/6.2.scm b/pset6/6.2.scm
new file mode 100644
index 0000000..6fda236
--- /dev/null
+++ b/pset6/6.2.scm
@@ -0,0 +1,74 @@
+;;; 6.2
+
+;; A
+(define (snark-hunt tree)
+  (define (snark-hunt-helper tree success)
+    (if (symbol? tree)
+      (if (eq? tree 'snark)
+        (success #t)
+        #f)
+      (begin
+        (for-each
+          (lambda (subtree)
+            (snark-hunt-helper subtree success))
+          tree)
+        #f)))
+  (call-with-current-continuation (lambda (success) (snark-hunt-helper tree success))))
+
+#|
+Sample output:
+1 ]=> (snark-hunt '(((a b c) d (e f)) g (((snark . "oops") h) (i . j))))
+;Value: #t
+
+1 ]=> (snark-hunt '(((a b c) d (e f)) g (((snarks 'fixed) h) (i j))))
+;Value: #f
+
+1 ]=> (snark-hunt '(((a b c) d (e f)) g (((snarks . "oops") h) (i . j))))
+;The object (snarks . "oops"), passed as an argument to for-each, is not a list.
+;To continue, call RESTART with an option number:
+; (RESTART 1) => Return to read-eval-print level 1.
+|#
+
+
+;; B
+(define (snark-hunt/instrumented tree)
+  (define (snark-hunt-helper tree success)
+    (pp "Called snark-hunt-helper")
+    (if (symbol? tree)
+      (if (eq? tree 'snark)
+        (begin
+          (pp "SUCCESS!")
+          (success #t))
+        #f)
+      (begin
+        (for-each
+          (lambda (subtree)
+            (snark-hunt-helper subtree success))
+          tree)
+        #f)))
+  (call-with-current-continuation (lambda (success) (snark-hunt-helper tree success))))
+
+#|
+Strategy:
+Simply print "SUCCESS!" each time the success continuation is called, and "Called snark-hunt-helper" when entering snark-hunt-helper. Since the only return values are either false or through the success continuation, if "SUCCESS!" is printed only once before returning #t, we know that only the original continuation was called on success.
+
+Sample output:
+1 ]=> (snark-hunt/instrumented '(((a b c) d (e f)) g (((snark . "oops") h) (i . j))))
+"Called snark-hunt-helper"
+"Called snark-hunt-helper"
+"Called snark-hunt-helper"
+"Called snark-hunt-helper"
+"Called snark-hunt-helper"
+"Called snark-hunt-helper"
+"Called snark-hunt-helper"
+"Called snark-hunt-helper"
+"Called snark-hunt-helper"
+"Called snark-hunt-helper"
+"Called snark-hunt-helper"
+"Called snark-hunt-helper"
+"Called snark-hunt-helper"
+"Called snark-hunt-helper"
+"Called snark-hunt-helper"
+"SUCCESS!"
+;Value: #t
+|#
diff --git a/pset6/ambsch.scm b/pset6/ambsch.scm
index 9c57ad0..cdc95dc 100644
--- a/pset6/ambsch.scm
+++ b/pset6/ambsch.scm
@@ -24,7 +24,7 @@
       (map (lambda (alternative)
              (lambda ()
                (within-continuation k alternative)))
-           alternatives))
+           (reorder-alternatives alternatives)))
      (yield))))
 
 
@@ -54,6 +54,48 @@
    (lambda () (undoer) (yield)))
   (doer))
 
+;;; 6.4.B Alternative reordering of alternatives wrappers
+(define (with-left-to-right-alternation thunk)
+  (call-with-current-continuation
+    (lambda (k)
+      (fluid-let ((reorder-alternatives reorder-alternatives-left-to-right-alternation)
+                  (*search-schedule* (empty-search-schedule))
+                  (*top-level* k))
+        (thunk)))))
+
+(define (with-right-to-left-alternation thunk)
+  (call-with-current-continuation
+    (lambda (k)
+      (fluid-let ((reorder-alternatives reorder-alternatives-right-to-left-alternation)
+                  (*search-schedule* (empty-search-schedule))
+                  (*top-level* k))
+        (thunk)))))
+
+(define (with-random-order-alternation thunk)
+  (call-with-current-continuation
+    (lambda (k)
+      (fluid-let ((reorder-alternatives reorder-alternatives-random-order-alternation)
+                  (*search-schedule* (empty-search-schedule))
+                  (*top-level* k))
+        (thunk)))))
+
+(define (reorder-alternatives-left-to-right-alternation alternatives)
+  alternatives)
+
+(define (reorder-alternatives-right-to-left-alternation alternatives)
+  (reverse alternatives))
+
+(define (reorder-alternatives-random-order-alternation alternatives)
+  (if (<= (length alternatives) 1)
+    alternatives
+    (let ((the-chosen-one (random (length alternatives))))
+      (cons (list-ref alternatives the-chosen-one)
+        (reorder-alternatives-random-order-alternation
+          (append (list-head alternatives the-chosen-one) (list-tail alternatives (+ the-chosen-one 1))))))))
+
+; default to left-to-right
+(define reorder-alternatives reorder-alternatives-left-to-right-alternation)
+
 ;;; Alternative search strategy wrappers
 
 (define (with-depth-first-schedule thunk)
diff --git a/pset6/answers.txt b/pset6/answers.txt
new file mode 100644
index 0000000..06b8d21
--- /dev/null
+++ b/pset6/answers.txt
@@ -0,0 +1,102 @@
+6.3
+DFS explores one branch at a time, traversing each entire subtree of a given node in order. BFS, on the other hand, explores many branches at once, and switches between each subtree, "pausing" to look at a different subtree each time a new node is expanded. DFS explores less total nodes because it only explores paths down the tree which it actually tests for success, whereas BFS may expand many partial paths down the tree that it never tests for success, effectively wasting any work done by expanding those paths.
+
+The value of *number-of-calls-to-fail* corresponds to the number of times an amb-list runs out of possible elements during a search, i.e. when all of a node's children have been expanded. This value is smaller for DFS because of the reasons stated above - BFS may waste some of the work it did expanding nodes it never actually tests for success.
+
+For the a-pythagorean-triple-from search, each node has an infinite number of children, at least until we hit an overflow, so DFS will traverse down with the initial i and j values, and then keep trying k values until an integer overflow occurs. Since i=j=1 initially, and no integer k satisfies the pythagorean triple requirement, DFS has no hope of succeeding.
+On the other hand, because of the way an-integer-between is structured, this BFS explores the tree of possible values in a bottom-left to top-right order, instead of the typical level-by-level order. (an-integer-from x) is equivalent to (amb x (amb (+ x 1) (amb (+ x 2) ...))), which allows for this "diagonal" traversal. This way, BFS can gradually explore a wide area of the tree without getting stuck in a hopeless situation like DFS.
+
+
+
+6.4
+A
+We could use a random AMB to return a random word of the day from a given list of words
+
+B
+See ambsch.scm
+
+Test cases:
+1 ]=> (with-random-order-alternation
+  (lambda ()
+    (amb 'Muddledness 'Myofibrilla 'Congelifract 'Noncontextually 'Overphilosophize 'Deratizing 'Unascribed 'Arboresque)))
+;Value: deratizing
+
+
+1 ]=> (with-random-order-alternation elementary-backtrack-test)
+(2)
+(2 b)
+(2 b #f)
+(2 b #t)
+(2 a)
+(2 a #t)
+(2 a #f)
+(3)
+(3 a)
+(3 a #f)
+(3 a #t)
+(3 b)
+(3 b #f)
+(3 b #t)
+(1)
+(1 a)
+(1 a #t)
+(1 a #f)
+(1 b)
+(1 b #f)
+(1 b #t)
+;Value: #f
+
+
+1 ]=> (with-right-to-left-alternation elementary-backtrack-test)
+(1)
+(1 a)
+(1 a #t)
+(1 a #f)
+(1 b)
+(1 b #t)
+(1 b #f)
+(2)
+(2 a)
+(2 a #t)
+(2 a #f)
+(2 b)
+(2 b #t)
+(2 b #f)
+(3)
+(3 a)
+(3 a #t)
+(3 a #f)
+(3 b)
+(3 b #t)
+(3 b #f)
+;Value: #f
+
+
+1 ]=> (with-right-to-left-alternation elementary-backtrack-test)
+(3)
+(3 b)
+(3 b #f)
+(3 b #t)
+(3 a)
+(3 a #f)
+(3 a #t)
+(2)
+(2 b)
+(2 b #f)
+(2 b #t)
+(2 a)
+(2 a #f)
+(2 a #t)
+(1)
+(1 b)
+(1 b #f)
+(1 b #t)
+(1 a)
+(1 a #f)
+(1 a #t)
+;Value: #f
+
+
+
+6.5
+set! updates the value of an existing binding. In this case, for each amb, all possible values are cycled through and the variable is assigned with respect to all continuations, instead of just the current continuation as we expect. This results in the variable keeping it's last value for all continuations once amb is done looping through the possible values.
